#Question 1:

''''

    A função 'find_nd' calcula a menor distancia de um ponto a um conjunto de pontos, retornando o elemento cuja distância ao ponto dado é mínima e seu índice.
    Dado um ponto 'point' e um conjunto de pontos em 'data', vamos analisar a complexidade dessa funcao:
1. Calculando a subtracao entre 'point' e cada ponto em 'data', temos complexidade O(n).
2. calculando a distancia de 'point' a cada ponto em 'data', assim, temos complexidade O(n).
3. Buscando, no array d, o elemento de menor valor, temos complexidade O(n).
    Logo, de 1, 2, 3, temos complexidade O(n) para a funcao problema.

'''

#Question 2:

import random

def generate_maze(m, n, room = 0, wall = 1, cheese = '.' ): #Criamos um labirinto de m paredes (linha) e n paredes (coluna)
    # Initialize a (2m + 1) x (2n + 1) matrix with all walls (1)
    maze = [[wall] * (2 * n + 1) for _ in range(2 * m + 1)]

    # Directions: (row_offset, col_offset) for N, S, W, E
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]


#Aqui, vamos criar a nossa funcao iterativa, usaremos pilha para isso.

    def dfs_iterative(start_x, start_y):
        """DFS iterativa para gerar o labirinto."""
        # Inicializa a pilha com a célula inicial
        stack = [(start_x, start_y)]

        while stack:
            x, y = stack.pop()
            # Marca a célula atual como visitada fazendo-a um caminho (room)
            maze[2 * x + 1][2 * y + 1] = room

        # Shuffle the directions to create a random path
        random.shuffle(directions)

        for dx, dy in directions:
            nstart_x, nstart_y = x + dx, y + dy  # New cell coordinates
            if 0 <= nstart_x < m and 0 <= nstart_y < n and maze[2 * nstart_x + 1][2 * nstart_y + 1] == wall:
                # Open the wall between the current cell and the new cell
                maze[2 * x + 1 + dx][2 * y + 1 + dy] = room
                # Recursively visit the new cell
                dfs_iterative(nstart_x, nstart_y)

    # Start DFS from the top-left corner (0, 0) of the logical grid
    dfs_iterative(0, 0)
    count = 0
    while True: # placing the chesse
        i = int(random.uniform(0, 2 * m))
        j = int(random.uniform(0, 2 * m))
        count += 1
        if maze[i][j] == room:
            maze[i][j] = cheese 
            break

    return maze

def print_maze(maze):
    for row in maze:
        print(" ".join(map(str, row)))

# Example usage:
if __name__ == '__main__':
    m, n = 5, 7  # Grid size
    random.seed(10110)
    maze = generate_maze(m, n)
    print('Maze 1')
    print_maze(maze)

    room = ' '
    wall = 'H'
    cheese = '*'
    maze = generate_maze(m, n, room, wall, cheese)
    print('\nMaze 2')
    print_maze(maze)


#Question 3:

import random

def generate_maze(m, n):
    # Cria um labirinto de m x n
    maze = [['H'] * (n * 2 + 1) for _ in range(m * 2 + 1)]
    
    # Função para criar o labirinto
    def dfs(x, y):
        maze[x][y] = ' '  # Marca como caminho
        directions = [(0, 2), (2, 0), (0, -2), (-2, 0)]  # Direções: Leste, Sul, Oeste, Norte
        random.shuffle(directions)  # Embaralha direções para criar um labirinto aleatório
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 < nx < m * 2 and 0 < ny < n * 2 and maze[nx][ny] == 'H':
                maze[x + dx // 2][y + dy // 2] = ' '  # Abre a parede
                dfs(nx, ny)  # Recursão na nova posição

    # Inicia a geração do labirinto a partir da posição (1, 1)
    dfs(1, 1)
    
    # Coloca o queijo em uma posição aleatória dentro do caminho
    while True:
        cheese_x = random.randint(1, m) * 2 - 1
        cheese_y = random.randint(1, n) * 2 - 1
        if maze[cheese_x][cheese_y] == ' ':
            maze[cheese_x][cheese_y] = 'C'  # Marca o queijo
            break

    return maze

def print_maze(maze):
    for row in maze:
        print(' '.join(row))

def find_path(maze, start):
    while True:
        stack = [start]
        visited = set() #Não queremos repetir caminhos já visitados
        path = []  # Para armazenar o caminho
        found_cheese = False

        while stack:
            x, y = stack.pop()
            if (x, y) in visited:
                continue
            
            visited.add((x, y))
            path.append((x, y))

            if maze[x][y] == 'C':  #Encontramos o queijo
                found_cheese = True
                break
            
            # Direções:
            directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
            found_valid_move = False
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] != 'H' and (nx, ny) not in visited:
                    stack.append((nx, ny))
                    found_valid_move = True
            
            if not found_valid_move:
                path.pop()  # Quando encontrar um caminho errado, removemos o ultimo elemento do caminho para que esse mesmo caminho não se repita.

        if found_cheese:
            return path
        
        return None  # Retorna None se não encontrar o caminho

def display_path(maze, path):
    for x, y in path:
        if maze[x][y] != 'C':  # Não marcar a posição do queijo
            maze[x][y] = '*'
    print_maze(maze)

# Gerar o labirinto e encontrar o caminho
m, n = 5, 5  # Dimensões do labirinto
maze = generate_maze(m, n)
print("Labirinto gerado:")
print_maze(maze)

start_position = (1, 1)
path = find_path(maze, start_position)

if path:
    print("\nCaminho encontrado:")
    display_path(maze, path)
else:
    print("Nenhum caminho encontrado.")


#Question 4:

class Grafo:
    def __init__(self):
        self.adjacencia = {}
        self.val = {}

    def adjacent(self, x, y) -> bool:
        return x in self.adjacencia and y in self.adjacencia[x]
    
    def neighbors(self, x) -> list:
        return self.adjacencia.get(x, []) #Vamos ver todos os y que têm aresta em comum com x
    
    def add_vertex(self, x) -> bool:
        if x not in self.adjacencia:
            self.adjacencia[x] = []
            return True
        return False
    
    def remove_vertex(self, x) -> bool:
        if x in self.adjacencia:
            del self.adjacencia[x] #Removendo x

            for vertex in self.adjacencia: #Vamos remover as arestas que apontam para x
                if x in self.adjacencia[vertex]:
                    self.adjacencia[vertex].remove(x)
            return True
        return False

    def add_edge(self, x, y) -> bool:
        if x in self.adjacencia and y not in self.adjacencia[x]: #Se y não está na adjacencia, basta colocá-lo
            self.adjacencia[x].append(y)    
            return True
        return False
    
    def remove_edge(self, x, y) -> bool:
        if x in self.adjacencia and y in self.adjacencia[x]: #Se y está na adjacencia, basta removê-lo
            self.adjacencia[x].remove(y)
            return True
        return False
    
    def get_vertex_value(self, x) -> object:
        return self.val[x]
    
    def set_vertex_value(self, x, v) -> None:
        self.val[x] = v


''''

Testes, caso queira:

if __name__ == "__main__":
    g = Grafo()

    # Teste add_vertex
    assert g.add_vertex("A") == True
    assert g.add_vertex("A") == False  # Deve falhar, pois "A" já existe

    # Teste add_edge
    g.add_vertex("B")
    assert g.add_edge("A", "B") == True
    assert g.add_edge("A", "B") == False  # A aresta já existe

    # Teste adjacent
    assert g.adjacent("A", "B") == True
    assert g.adjacent("B", "A") == False

    # Teste neighbors
    assert g.neighbors("A") == ["B"]
    assert g.neighbors("B") == []

    # Teste remove_edge
    assert g.remove_edge("A", "B") == True
    assert g.remove_edge("A", "B") == False  # A aresta já foi removida

    # Teste remove_vertex
    assert g.remove_vertex("A") == True
    assert g.remove_vertex("A") == False  # Já foi removido

    # Teste get_vertex_value e set_vertex_value
    g.add_vertex("C")
    g.set_vertex_value("C", 42)
    assert g.get_vertex_value("C") == 42
    g.set_vertex_value("C", 100)
    assert g.get_vertex_value("C") == 100

    print("Todos os testes passaram!")

''''

