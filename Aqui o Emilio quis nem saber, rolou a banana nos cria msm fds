#Question 1:

''''

    A função 'find_nd' calcula a menor distancia de um ponto a um conjunto de pontos, retornando o elemento cuja distância ao ponto dado é mínima e seu índice.
    Dado um ponto 'point' e um conjunto de pontos em 'data', vamos analisar a complexidade dessa funcao:
1. Calculando a subtracao entre 'point' e cada ponto em 'data', temos complexidade O(n).
2. calculando a distancia de 'point' a cada ponto em 'data', assim, temos complexidade O(n).
3. Buscando, no array d, o elemento de menor valor, temos complexidade O(n).
    Logo, de 1, 2, 3, temos complexidade O(n) para a funcao problema.

'''

#Question 2:

import random

def generate_maze(m, n, room = 0, wall = 1, cheese = '.' ): #Criamos um labirinto de m paredes (linha) e n paredes (coluna)
    # Initialize a (2m + 1) x (2n + 1) matrix with all walls (1)
    maze = [[wall] * (2 * n + 1) for _ in range(2 * m + 1)]

    # Directions: (row_offset, col_offset) for N, S, W, E
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]


#Aqui, vamos criar a nossa funcao iterativa, usaremos pilha para isso.

    def dfs_iterative(start_x, start_y):
        """DFS iterativa para gerar o labirinto."""
        # Inicializa a pilha com a célula inicial
        stack = [(start_x, start_y)]

        while stack:
            x, y = stack.pop()
            # Marca a célula atual como visitada fazendo-a um caminho (room)
            maze[2 * x + 1][2 * y + 1] = room

        # Shuffle the directions to create a random path
        random.shuffle(directions)

        for dx, dy in directions:
            nstart_x, nstart_y = x + dx, y + dy  # New cell coordinates
            if 0 <= nstart_x < m and 0 <= nstart_y < n and maze[2 * nstart_x + 1][2 * nstart_y + 1] == wall:
                # Open the wall between the current cell and the new cell
                maze[2 * x + 1 + dx][2 * y + 1 + dy] = room
                # Recursively visit the new cell
                dfs_iterative(nstart_x, nstart_y)

    # Start DFS from the top-left corner (0, 0) of the logical grid
    dfs_iterative(0, 0)
    count = 0
    while True: # placing the chesse
        i = int(random.uniform(0, 2 * m))
        j = int(random.uniform(0, 2 * m))
        count += 1
        if maze[i][j] == room:
            maze[i][j] = cheese 
            break

    return maze

def print_maze(maze):
    for row in maze:
        print(" ".join(map(str, row)))

# Example usage:
if __name__ == '__main__':
    m, n = 5, 7  # Grid size
    random.seed(10110)
    maze = generate_maze(m, n)
    print('Maze 1')
    print_maze(maze)

    room = ' '
    wall = 'H'
    cheese = '*'
    maze = generate_maze(m, n, room, wall, cheese)
    print('\nMaze 2')
    print_maze(maze)


#Question 3:
